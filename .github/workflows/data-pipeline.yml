name: data-pipeline

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Upload .osm file via SSH
      uses: appleboy/scp-action@v1
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: 22
        source: "data/map.osm"
        target: "/home/${{ secrets.USERNAME }}/workspace"

    - name: Import .osm on EC2
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: 22
        script: |
          echo "▶ Create required PostgreSQL extensions"
          docker exec postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          docker exec postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "CREATE EXTENSION IF NOT EXISTS hstore;"
          docker exec postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "CREATE EXTENSION IF NOT EXISTS pgrouting;"
          
          echo "▶ Copy map.osm into container"
          docker cp /home/${{ secrets.USERNAME }}/workspace/data/map.osm postgres_db:/map.osm
          
          echo "▶ Run osm2pgsql import"
          docker exec -i postgres_db bash -c \
            "osm2pgsql -d ajou_way -U '${{ secrets.POSTGRESQL_USER }}' -H localhost -P 5432 -C 2000 --hstore --create /map.osm"
          
          echo "▶ Drop and create edges table"
          docker exec -i postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "
          DROP TABLE IF EXISTS edges CASCADE;
          
          CREATE TABLE edges AS
          SELECT
            row_number() OVER () AS id,
            ST_MakeLine(pt1.geom, pt2.geom)::geometry(LineString, 3857) AS geom
          FROM (
            SELECT
              osm_id,
              (ST_DumpPoints(way)).path[1] AS pt_idx,
              (ST_DumpPoints(way)).geom AS geom
            FROM planet_osm_line
            WHERE way IS NOT NULL
          ) pt1
          JOIN (
            SELECT
              osm_id,
              (ST_DumpPoints(way)).path[1] AS pt_idx,
              (ST_DumpPoints(way)).geom AS geom
            FROM planet_osm_line
            WHERE way IS NOT NULL
          ) pt2
          ON pt1.osm_id = pt2.osm_id
          AND pt1.pt_idx = pt2.pt_idx - 1;
          "
          
          echo "▶ Add source and target columns"
          docker exec -i postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "
          ALTER TABLE edges ADD COLUMN source BIGINT;
          ALTER TABLE edges ADD COLUMN target BIGINT;
          "
          
          echo "▶ Create topology using pgr_createTopology"
          docker exec -i postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "
          SELECT pgr_createTopology('edges', 0.00001, 'geom');
          "
          
          echo "▶ Add cost columns"
          docker exec -i postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "
          ALTER TABLE edges ADD COLUMN cost DOUBLE PRECISION;
          ALTER TABLE edges ADD COLUMN reverse_cost DOUBLE PRECISION;
          "
          
          echo "▶ Set cost and reverse_cost"
          docker exec -i postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "
          UPDATE edges
          SET cost = ST_Length(geom),
              reverse_cost = ST_Length(geom);
          "
