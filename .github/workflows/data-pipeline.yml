name: data-pipeline

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-from-osm-update]


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install osm2pgsql
      run: |
        sudo apt-get update
        sudo apt-get install -y osm2pgsql postgresql-client openssh-client

    - name: Start SSH tunnel to EC2 (localhost:5432 → EC2:5432)
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no -f -N -L 5432:localhost:5432 ${{ secrets.USERNAME }}@${{ secrets.HOST }}

    - name: Import .osm into remote PostgreSQL (through tunnel)
      run: |
        osm2pgsql \
          -d ajou_way \
          -U ${{ secrets.POSTGRESQL_USER }} \
          -H localhost \
          -P 5432 \
          --hstore \
          --create data/map.osm
      env:
        PGPASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}

    - name: Configure ways table and topology
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: 22
        script: |
          docker exec postgres_db bash -c "PGPASSWORD='${{ secrets.POSTGRESQL_PASSWORD }}' psql -h localhost -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c \"CREATE EXTENSION IF NOT EXISTS postgis;\""
          docker exec postgres_db bash -c "PGPASSWORD='${{ secrets.POSTGRESQL_PASSWORD }}' psql -h localhost -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c \"CREATE EXTENSION IF NOT EXISTS hstore;\""
          docker exec postgres_db bash -c "PGPASSWORD='${{ secrets.POSTGRESQL_PASSWORD }}' psql -h localhost -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c \"CREATE EXTENSION IF NOT EXISTS pgrouting;\""

          docker exec postgres_db bash -c "PGPASSWORD='${{ secrets.POSTGRESQL_PASSWORD }}' psql -h localhost -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way <<EOF
          DROP TABLE IF EXISTS ways CASCADE;
          
          CREATE TABLE ways AS
          SELECT
            row_number() OVER () AS id,
            ST_MakeLine(pt1.geom, pt2.geom)::geometry(LineString, 3857) AS geom
          FROM (
            SELECT
              osm_id,
              (ST_DumpPoints(way)).path[1] AS pt_idx,
              (ST_DumpPoints(way)).geom AS geom
            FROM planet_osm_line
            WHERE way IS NOT NULL
          ) pt1
          JOIN (
            SELECT
              osm_id,
              (ST_DumpPoints(way)).path[1] AS pt_idx,
              (ST_DumpPoints(way)).geom AS geom
            FROM planet_osm_line
            WHERE way IS NOT NULL
          ) pt2
          ON pt1.osm_id = pt2.osm_id
          AND pt1.pt_idx = pt2.pt_idx - 1;
          EOF"
          
                    docker exec postgres_db bash -c "PGPASSWORD='${{ secrets.POSTGRESQL_PASSWORD }}' psql -h localhost -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way <<EOF
          ALTER TABLE ways ADD COLUMN source BIGINT;
          ALTER TABLE ways ADD COLUMN target BIGINT;
          EOF"
          
                    docker exec postgres_db bash -c "PGPASSWORD='${{ secrets.POSTGRESQL_PASSWORD }}' psql -h localhost -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way <<EOF
          SELECT pgr_createTopology('ways', 0.00001, 'geom');
          EOF"
          
                    docker exec postgres_db bash -c "PGPASSWORD='${{ secrets.POSTGRESQL_PASSWORD }}' psql -h localhost -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way <<EOF
          ALTER TABLE ways ADD COLUMN cost DOUBLE PRECISION;
          ALTER TABLE ways ADD COLUMN reverse_cost DOUBLE PRECISION;
          
          UPDATE ways
          SET cost = ST_Length(geom),
              reverse_cost = ST_Length(geom);
          EOF"


    - name: Restart all services after osm import (clean state)
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: 22
        script: |
          echo "▶ Restarting docker-compose stack"
          cd /home/${{ secrets.USERNAME }}/workspace
          docker-compose down
          docker-compose up -d
