name: data-pipeline

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install osm2pgsql in GitHub Action runner
      run: |
        sudo apt-get update
        sudo apt-get install -y osm2pgsql postgresql-client

    - name: Import .osm to remote PostgreSQL
      run: |
        echo "▶ Import OSM data into PostgreSQL from GitHub Actions"
        osm2pgsql \
          -d ajou_way \
          -U ${{ secrets.POSTGRESQL_USER }} \
          -H ${{ secrets.HOST }} \
          -P 5432 \
          --hstore \
          --create data/map.osm
      env:
        PGPASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}

    - name: Configure ways table & pgrouting
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: 22
        script: |
          echo "▶ Create required PostgreSQL extensions"
          docker exec postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          docker exec postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "CREATE EXTENSION IF NOT EXISTS hstore;"
          docker exec postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "CREATE EXTENSION IF NOT EXISTS pgrouting;"

          echo "▶ Drop and create ways table"
          docker exec -i postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "
          DROP TABLE IF EXISTS ways CASCADE;

          CREATE TABLE ways AS
          SELECT
            row_number() OVER () AS id,
            ST_MakeLine(pt1.geom, pt2.geom)::geometry(LineString, 3857) AS geom
          FROM (
            SELECT
              osm_id,
              (ST_DumpPoints(way)).path[1] AS pt_idx,
              (ST_DumpPoints(way)).geom AS geom
            FROM planet_osm_line
            WHERE way IS NOT NULL
          ) pt1
          JOIN (
            SELECT
              osm_id,
              (ST_DumpPoints(way)).path[1] AS pt_idx,
              (ST_DumpPoints(way)).geom AS geom
            FROM planet_osm_line
            WHERE way IS NOT NULL
          ) pt2
          ON pt1.osm_id = pt2.osm_id
          AND pt1.pt_idx = pt2.pt_idx - 1;
          "

          echo "▶ Add source and target columns"
          docker exec -i postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "
          ALTER TABLE ways ADD COLUMN source BIGINT;
          ALTER TABLE ways ADD COLUMN target BIGINT;
          "

          echo "▶ Create topology using pgr_createTopology"
          docker exec -i postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "
          SELECT pgr_createTopology('ways', 0.00001, 'geom');
          "

          echo "▶ Add cost columns"
          docker exec -i postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "
          ALTER TABLE ways ADD COLUMN cost DOUBLE PRECISION;
          ALTER TABLE ways ADD COLUMN reverse_cost DOUBLE PRECISION;
          "

          echo "▶ Set cost and reverse_cost"
          docker exec -i postgres_db psql -U '${{ secrets.POSTGRESQL_USER }}' -d ajou_way -c "
          UPDATE ways
          SET cost = ST_Length(geom),
              reverse_cost = ST_Length(geom);
          "
